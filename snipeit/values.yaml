replicaCount: 1
updateStrategy: RollingUpdate

# MariaDB
mariadb:
  # enabled: If enabled, then a new install of mariadb will be
  # included.
  enabled: true
  global:
    defaultStorageClass: "longhorn"
  auth:
    rootPassword: adminsecret
    database: "snipeit"
    username: "snipeit"
    password: "snipeitdbsecret"

# externalDB: Use an "external" database (i.e. not supplied by this
# chart).
externalDB:
  # enabled: Whether to use an external database. If set, then
  # mariadb.enabled must be set to false.
  enabled: false

  # username: See pod.spec.containers.env for syntax.
  username: {}
  # E.g.
  # value: "TheUserNameHere"
  # or
  # valueFrom:
  #   secretKeyRef:
  #     name: name-of-secret
  #     key: username
  # or:
  # valueFrom:
  #   configMapKeyRef:
  #     name: name-of-configmap
  #     key: username

  # password: See pod.spec.containers.env for syntax.
  password: {}
  # E.g.
  # value: "If the password goes here it will be visible in the pod spec"
  # or:
  # valueFrom:
  #   secretKeyRef:
  #     name: name-of-secret
  #     key: password
  # or (you really should not be storing passwords in ConfigMaps,
  # but it is _your_ system...):
  # valueFrom:
  #   configMapKeyRef:
  #     name: name-of-configmap
  #     key: password

  # database: See pod.spec.containers.env for syntax.
  database: {}
  # E.g.
  # value: "NameOfDatabase"
  # or
  # valueFrom:
  #   secretKeyRef:
  #     name: name-of-secret
  #     key: dbname
  # or:
  # valueFrom:
  #   configMapKeyRef:
  #     name: name-of-configmap
  #     key: dbname

  # host: See pod.spec.containers.env for syntax.
  host: {}
  # E.g.
  # value: "someDnsName.example.com"
  # or
  # valueFrom:
  #   secretKeyRef:
  #     name: name-of-secret
  #     key: user
  # or:
  # valueFrom:
  #   configMapKeyRef:
  #     name: name-of-configmap
  #     key: user

# snipeit config
snipeit:
  config:
    appKey:
      name: laravel-app-key
    env: production
    debug: false
    url: http://snipeit.example.com
    timezone: Europe/Berlin
    locale: en
  persistence:
    size: 2Gi
    storageClass: longhorn
    accessMode: ReadWriteOnce
  image:
    repository: docker.io/snipe/snipe-it
    pullPolicy: IfNotPresent
    tag: "v8.2.1-alpine"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 101
securityContext: {}
  # runAsNonRoot: true
  # allowPrivilegeEscalation: false
  # runAsUser: 100
  # runAsGroup: 101
  # seccompProfile:
  #   type: RuntimeDefault

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: snipeit.example.com
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  limits:
    # cpu: 1000m
    memory: 1024Mi
  requests:
    cpu: 300m
    memory: 496Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /health
    port: http
  periodSeconds: 15
  timeoutSeconds: 3
readinessProbe:
  httpGet:
    path: /health
    port: http
  periodSeconds: 15
  timeoutSeconds: 3

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
  - name: snipeit-data
    mountPath: "/var/lib/snipeit"
    subPath: "www"
  - name: snipeit-data
    mountPath: "/var/www/html/storage/framework/sessions"
    subPath: "sessions"
  - name: snipeit-data
    mountPath: "/var/www/html/storage/app/backups"
    subPath: "backups"

nodeSelector: {}

tolerations: []

affinity: {}